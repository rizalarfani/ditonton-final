// Mocks generated by Mockito 5.3.0 from annotations
// in ditonton/test/presentation/page/detail_tv_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:bloc/bloc.dart' as _i10;
import 'package:ditonton/domain/usecases/get_tv_series_detail.dart' as _i2;
import 'package:ditonton/domain/usecases/get_tv_series_recommendation.dart'
    as _i7;
import 'package:ditonton/domain/usecases/get_watchlist_status.dart' as _i4;
import 'package:ditonton/domain/usecases/remove_watchlist.dart' as _i6;
import 'package:ditonton/domain/usecases/save_watchlist.dart' as _i5;
import 'package:ditonton/presentation/bloc/tv_detail_bloc.dart' as _i3;
import 'package:ditonton/presentation/bloc/tv_recomenndation_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetTvSeriesDetail_0 extends _i1.SmartFake
    implements _i2.GetTvSeriesDetail {
  _FakeGetTvSeriesDetail_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTvDetailState_1 extends _i1.SmartFake implements _i3.TvDetailState {
  _FakeTvDetailState_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetWatchListStatus_2 extends _i1.SmartFake
    implements _i4.GetWatchListStatus {
  _FakeGetWatchListStatus_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSaveWatchlist_3 extends _i1.SmartFake implements _i5.SaveWatchlist {
  _FakeSaveWatchlist_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeRemoveWatchlist_4 extends _i1.SmartFake
    implements _i6.RemoveWatchlist {
  _FakeRemoveWatchlist_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTvWatchlistState_5 extends _i1.SmartFake
    implements _i3.TvWatchlistState {
  _FakeTvWatchlistState_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetTvSeriesRecommendation_6 extends _i1.SmartFake
    implements _i7.GetTvSeriesRecommendation {
  _FakeGetTvSeriesRecommendation_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTvRecomenndationState_7 extends _i1.SmartFake
    implements _i8.TvRecomenndationState {
  _FakeTvRecomenndationState_7(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [TvDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvDetailBloc extends _i1.Mock implements _i3.TvDetailBloc {
  MockTvDetailBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetTvSeriesDetail get getTvSeriesDetail =>
      (super.noSuchMethod(Invocation.getter(#getTvSeriesDetail),
              returnValue: _FakeGetTvSeriesDetail_0(
                  this, Invocation.getter(#getTvSeriesDetail)))
          as _i2.GetTvSeriesDetail);
  @override
  _i3.TvDetailState get state => (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeTvDetailState_1(this, Invocation.getter(#state)))
      as _i3.TvDetailState);
  @override
  _i9.Stream<_i3.TvDetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i9.Stream<_i3.TvDetailState>.empty())
          as _i9.Stream<_i3.TvDetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.TvDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.TvDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.TvDetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.TvDetailEvent>(
          _i10.EventHandler<E, _i3.TvDetailState>? handler,
          {_i10.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i10.Transition<_i3.TvDetailEvent, _i3.TvDetailState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  void onChange(_i10.Change<_i3.TvDetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [TvWatchlistBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvWatchlistBloc extends _i1.Mock implements _i3.TvWatchlistBloc {
  MockTvWatchlistBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetWatchListStatus get getWatchListStatus =>
      (super.noSuchMethod(Invocation.getter(#getWatchListStatus),
              returnValue: _FakeGetWatchListStatus_2(
                  this, Invocation.getter(#getWatchListStatus)))
          as _i4.GetWatchListStatus);
  @override
  _i5.SaveWatchlist get saveWatchlist =>
      (super.noSuchMethod(Invocation.getter(#saveWatchlist),
              returnValue:
                  _FakeSaveWatchlist_3(this, Invocation.getter(#saveWatchlist)))
          as _i5.SaveWatchlist);
  @override
  _i6.RemoveWatchlist get removeWatchlist => (super.noSuchMethod(
          Invocation.getter(#removeWatchlist),
          returnValue:
              _FakeRemoveWatchlist_4(this, Invocation.getter(#removeWatchlist)))
      as _i6.RemoveWatchlist);
  @override
  _i3.TvWatchlistState get state => (super.noSuchMethod(
          Invocation.getter(#state),
          returnValue: _FakeTvWatchlistState_5(this, Invocation.getter(#state)))
      as _i3.TvWatchlistState);
  @override
  _i9.Stream<_i3.TvWatchlistState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i9.Stream<_i3.TvWatchlistState>.empty())
          as _i9.Stream<_i3.TvWatchlistState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.TvDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.TvDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.TvWatchlistState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.TvDetailEvent>(
          _i10.EventHandler<E, _i3.TvWatchlistState>? handler,
          {_i10.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i10.Transition<_i3.TvDetailEvent, _i3.TvWatchlistState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  void onChange(_i10.Change<_i3.TvWatchlistState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [TvRecomenndationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvRecomenndationBloc extends _i1.Mock
    implements _i8.TvRecomenndationBloc {
  MockTvRecomenndationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.GetTvSeriesRecommendation get getTvSeriesRecommendation =>
      (super.noSuchMethod(Invocation.getter(#getTvSeriesRecommendation),
              returnValue: _FakeGetTvSeriesRecommendation_6(
                  this, Invocation.getter(#getTvSeriesRecommendation)))
          as _i7.GetTvSeriesRecommendation);
  @override
  _i8.TvRecomenndationState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue:
                  _FakeTvRecomenndationState_7(this, Invocation.getter(#state)))
          as _i8.TvRecomenndationState);
  @override
  _i9.Stream<_i8.TvRecomenndationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i9.Stream<_i8.TvRecomenndationState>.empty())
          as _i9.Stream<_i8.TvRecomenndationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i8.TvRecomenndationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i8.TvRecomenndationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i8.TvRecomenndationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i8.TvRecomenndationEvent>(
          _i10.EventHandler<E, _i8.TvRecomenndationState>? handler,
          {_i10.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i10.Transition<_i8.TvRecomenndationEvent, _i8.TvRecomenndationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  void onChange(_i10.Change<_i8.TvRecomenndationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
