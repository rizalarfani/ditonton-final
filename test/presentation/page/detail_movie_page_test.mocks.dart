// Mocks generated by Mockito 5.3.0 from annotations
// in ditonton/test/presentation/page/detail_movie_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:bloc/bloc.dart' as _i10;
import 'package:ditonton/domain/usecases/get_movie_detail.dart' as _i2;
import 'package:ditonton/domain/usecases/get_movie_recommendations.dart' as _i4;
import 'package:ditonton/domain/usecases/get_watchlist_status.dart' as _i6;
import 'package:ditonton/domain/usecases/remove_watchlist.dart' as _i8;
import 'package:ditonton/domain/usecases/save_watchlist.dart' as _i7;
import 'package:ditonton/presentation/bloc/movie_detail_bloc.dart' as _i3;
import 'package:ditonton/presentation/bloc/movies_recomendation_bloc.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetMovieDetail_0 extends _i1.SmartFake
    implements _i2.GetMovieDetail {
  _FakeGetMovieDetail_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeMovieDetailState_1 extends _i1.SmartFake
    implements _i3.MovieDetailState {
  _FakeMovieDetailState_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetMovieRecommendations_2 extends _i1.SmartFake
    implements _i4.GetMovieRecommendations {
  _FakeGetMovieRecommendations_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeMoviesRecomendationState_3 extends _i1.SmartFake
    implements _i5.MoviesRecomendationState {
  _FakeMoviesRecomendationState_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetWatchListStatus_4 extends _i1.SmartFake
    implements _i6.GetWatchListStatus {
  _FakeGetWatchListStatus_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSaveWatchlist_5 extends _i1.SmartFake implements _i7.SaveWatchlist {
  _FakeSaveWatchlist_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeRemoveWatchlist_6 extends _i1.SmartFake
    implements _i8.RemoveWatchlist {
  _FakeRemoveWatchlist_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeMovieWatchlistState_7 extends _i1.SmartFake
    implements _i3.MovieWatchlistState {
  _FakeMovieWatchlistState_7(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [MovieDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailBloc extends _i1.Mock implements _i3.MovieDetailBloc {
  MockMovieDetailBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetMovieDetail get getMovieDetail => (super.noSuchMethod(
          Invocation.getter(#getMovieDetail),
          returnValue:
              _FakeGetMovieDetail_0(this, Invocation.getter(#getMovieDetail)))
      as _i2.GetMovieDetail);
  @override
  _i3.MovieDetailState get state => (super.noSuchMethod(
          Invocation.getter(#state),
          returnValue: _FakeMovieDetailState_1(this, Invocation.getter(#state)))
      as _i3.MovieDetailState);
  @override
  _i9.Stream<_i3.MovieDetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i9.Stream<_i3.MovieDetailState>.empty())
          as _i9.Stream<_i3.MovieDetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.MovieDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.MovieDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.MovieDetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.MovieDetailEvent>(
          _i10.EventHandler<E, _i3.MovieDetailState>? handler,
          {_i10.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i10.Transition<_i3.MovieDetailEvent, _i3.MovieDetailState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  void onChange(_i10.Change<_i3.MovieDetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [MoviesRecomendationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesRecomendationBloc extends _i1.Mock
    implements _i5.MoviesRecomendationBloc {
  MockMoviesRecomendationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetMovieRecommendations get getMovieRecommendations =>
      (super.noSuchMethod(Invocation.getter(#getMovieRecommendations),
              returnValue: _FakeGetMovieRecommendations_2(
                  this, Invocation.getter(#getMovieRecommendations)))
          as _i4.GetMovieRecommendations);
  @override
  _i5.MoviesRecomendationState get state => (super.noSuchMethod(
          Invocation.getter(#state),
          returnValue:
              _FakeMoviesRecomendationState_3(this, Invocation.getter(#state)))
      as _i5.MoviesRecomendationState);
  @override
  _i9.Stream<_i5.MoviesRecomendationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i9.Stream<_i5.MoviesRecomendationState>.empty())
          as _i9.Stream<_i5.MoviesRecomendationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i5.MoviesRecomendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i5.MoviesRecomendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i5.MoviesRecomendationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i5.MoviesRecomendationEvent>(
          _i10.EventHandler<E, _i5.MoviesRecomendationState>? handler,
          {_i10.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i10.Transition<_i5.MoviesRecomendationEvent,
                  _i5.MoviesRecomendationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  void onChange(_i10.Change<_i5.MoviesRecomendationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [MovieWatchlistBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieWatchlistBloc extends _i1.Mock
    implements _i3.MovieWatchlistBloc {
  MockMovieWatchlistBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetWatchListStatus get getWatchListStatus =>
      (super.noSuchMethod(Invocation.getter(#getWatchListStatus),
              returnValue: _FakeGetWatchListStatus_4(
                  this, Invocation.getter(#getWatchListStatus)))
          as _i6.GetWatchListStatus);
  @override
  _i7.SaveWatchlist get saveWatchlist =>
      (super.noSuchMethod(Invocation.getter(#saveWatchlist),
              returnValue:
                  _FakeSaveWatchlist_5(this, Invocation.getter(#saveWatchlist)))
          as _i7.SaveWatchlist);
  @override
  _i8.RemoveWatchlist get removeWatchlist => (super.noSuchMethod(
          Invocation.getter(#removeWatchlist),
          returnValue:
              _FakeRemoveWatchlist_6(this, Invocation.getter(#removeWatchlist)))
      as _i8.RemoveWatchlist);
  @override
  _i3.MovieWatchlistState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue:
                  _FakeMovieWatchlistState_7(this, Invocation.getter(#state)))
          as _i3.MovieWatchlistState);
  @override
  _i9.Stream<_i3.MovieWatchlistState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i9.Stream<_i3.MovieWatchlistState>.empty())
          as _i9.Stream<_i3.MovieWatchlistState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.MovieDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.MovieDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.MovieWatchlistState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.MovieDetailEvent>(
          _i10.EventHandler<E, _i3.MovieWatchlistState>? handler,
          {_i10.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i10.Transition<_i3.MovieDetailEvent, _i3.MovieWatchlistState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  void onChange(_i10.Change<_i3.MovieWatchlistState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
