// Mocks generated by Mockito 5.3.0 from annotations
// in ditonton/test/presentation/page/watchlist_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:bloc/bloc.dart' as _i7;
import 'package:ditonton/domain/usecases/get_watchlist_movies.dart' as _i2;
import 'package:ditonton/domain/usecases/get_watchlist_tv_series.dart' as _i4;
import 'package:ditonton/presentation/bloc/watchlist_movie_bloc.dart' as _i3;
import 'package:ditonton/presentation/bloc/watchlist_tv_bloc.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetWatchlistMovies_0 extends _i1.SmartFake
    implements _i2.GetWatchlistMovies {
  _FakeGetWatchlistMovies_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWatchlistMovieState_1 extends _i1.SmartFake
    implements _i3.WatchlistMovieState {
  _FakeWatchlistMovieState_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGetWatchlistTvSeries_2 extends _i1.SmartFake
    implements _i4.GetWatchlistTvSeries {
  _FakeGetWatchlistTvSeries_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWatchlistTvState_3 extends _i1.SmartFake
    implements _i5.WatchlistTvState {
  _FakeWatchlistTvState_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [WatchlistMovieBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistMovieBloc extends _i1.Mock
    implements _i3.WatchlistMovieBloc {
  MockWatchlistMovieBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetWatchlistMovies get getWatchlistMovies =>
      (super.noSuchMethod(Invocation.getter(#getWatchlistMovies),
              returnValue: _FakeGetWatchlistMovies_0(
                  this, Invocation.getter(#getWatchlistMovies)))
          as _i2.GetWatchlistMovies);
  @override
  _i3.WatchlistMovieState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue:
                  _FakeWatchlistMovieState_1(this, Invocation.getter(#state)))
          as _i3.WatchlistMovieState);
  @override
  _i6.Stream<_i3.WatchlistMovieState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i6.Stream<_i3.WatchlistMovieState>.empty())
          as _i6.Stream<_i3.WatchlistMovieState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.WatchlistMovieEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.WatchlistMovieEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.WatchlistMovieState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.WatchlistMovieEvent>(
          _i7.EventHandler<E, _i3.WatchlistMovieState>? handler,
          {_i7.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i7.Transition<_i3.WatchlistMovieEvent, _i3.WatchlistMovieState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i6.Future<void>.value(),
      returnValueForMissingStub: _i6.Future<void>.value()) as _i6.Future<void>);
  @override
  void onChange(_i7.Change<_i3.WatchlistMovieState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [WatchlistTvBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistTvBloc extends _i1.Mock implements _i5.WatchlistTvBloc {
  MockWatchlistTvBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetWatchlistTvSeries get getWatchlistTvSeries =>
      (super.noSuchMethod(Invocation.getter(#getWatchlistTvSeries),
              returnValue: _FakeGetWatchlistTvSeries_2(
                  this, Invocation.getter(#getWatchlistTvSeries)))
          as _i4.GetWatchlistTvSeries);
  @override
  _i5.WatchlistTvState get state => (super.noSuchMethod(
          Invocation.getter(#state),
          returnValue: _FakeWatchlistTvState_3(this, Invocation.getter(#state)))
      as _i5.WatchlistTvState);
  @override
  _i6.Stream<_i5.WatchlistTvState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: _i6.Stream<_i5.WatchlistTvState>.empty())
          as _i6.Stream<_i5.WatchlistTvState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i5.WatchlistTvEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i5.WatchlistTvEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i5.WatchlistTvState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i5.WatchlistTvEvent>(
          _i7.EventHandler<E, _i5.WatchlistTvState>? handler,
          {_i7.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i7.Transition<_i5.WatchlistTvEvent, _i5.WatchlistTvState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i6.Future<void>.value(),
      returnValueForMissingStub: _i6.Future<void>.value()) as _i6.Future<void>);
  @override
  void onChange(_i7.Change<_i5.WatchlistTvState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
